from abc import ABC, abstractmethod
from typing import Optional
from assembler.expression import Context, ExpressionException
from .machine_code_listener import MachineCodeListener

class InstructionInterface(ABC):
    """Interface to access an instruction or data item in the program."""

    @property
    @abstractmethod
    def abs_addr(self) -> int:
        """Returns an absolute instruction address. -1 if no abs address is set."""
        pass

    @property
    @abstractmethod
    def line_number(self) -> int:
        """Returns the source line number of this instruction."""
        pass

    @property
    @abstractmethod
    def size(self) -> int:
        """Returns the size of this instruction in words."""
        pass

    @property
    @abstractmethod
    def label(self) -> Optional[str]:
        """Returns the label associated with this instruction, if any."""
        pass

    @abstractmethod
    def create_machine_code(self, context: Context, machine_code_listener: MachineCodeListener):
        """Emits the generated code to the given listener."""
        pass

    @property
    @abstractmethod
    def macro_description(self) -> Optional[str]:
        """Returns a description if this instruction was generated by a macro."""
        pass

    @property
    @abstractmethod
    def comment(self) -> Optional[str]:
        """Returns the comment associated with this instruction."""
        pass

